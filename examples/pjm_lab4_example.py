"""
DAT301m Lab 4 - V√≠ d·ª• s·ª≠ d·ª•ng v·ªõi d·ªØ li·ªáu PJM th·ª±c t·∫ø
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.pjm_data_analyzer import PJMDataAnalyzer
from src.lab4_interface import DAT301mLab4Interface

def main():
    """
    V√≠ d·ª• ho√†n ch·ªânh cho DAT301m Lab 4 v·ªõi d·ªØ li·ªáu PJM
    """
    print("="*80)
    print("DAT301m Lab 4 - V√≠ d·ª• v·ªõi d·ªØ li·ªáu PJM")
    print("="*80)
    
    # B∆∞·ªõc 1: Ph√¢n t√≠ch d·ªØ li·ªáu c√≥ s·∫µn
    print("\nüîç B∆Ø·ªöC 1: PH√ÇN T√çCH D·ªÆ LI·ªÜU C√ì S·∫¥N")
    print("-" * 50)
    
    analyzer = PJMDataAnalyzer('data')
    available_regions = analyzer.get_available_regions()
    
    print(f"C√°c khu v·ª±c c√≥ s·∫µn: {available_regions}")
    
    # Ch·ªçn khu v·ª±c ƒë·ªÉ ph√¢n t√≠ch (v√≠ d·ª•: PJME)
    if 'PJME' in available_regions:
        region = 'PJME'
    elif 'AEP' in available_regions:
        region = 'AEP'
    elif 'PJM_Load' in available_regions:
        region = 'PJM_Load'
    else:
        region = available_regions[0]
    
    print(f"S·∫Ω s·ª≠ d·ª•ng khu v·ª±c: {region}")
    
    # B∆∞·ªõc 2: Ph√¢n t√≠ch d·ªØ li·ªáu chi ti·∫øt
    print(f"\nüìä B∆Ø·ªöC 2: PH√ÇN T√çCH D·ªÆ LI·ªÜU CHI TI·∫æT - {region}")
    print("-" * 50)
    
    # T·∫£i d·ªØ li·ªáu
    data = analyzer.load_region_data(region)
    
    # L·∫•y th·ªëng k√™
    stats = analyzer.get_data_statistics()
    print(f"\nTh·ªëng k√™ c∆° b·∫£n:")
    print(f"  - S·ªë b·∫£n ghi: {stats['total_records']:,}")
    print(f"  - Kho·∫£ng th·ªùi gian: {stats['date_range']['duration_years']:.1f} nƒÉm")
    print(f"  - Ti√™u th·ª• trung b√¨nh: {stats['mw_statistics']['mean']:.0f} MW")
    print(f"  - Ti√™u th·ª• cao nh·∫•t: {stats['mw_statistics']['max']:.0f} MW")
    print(f"  - Ti√™u th·ª• th·∫•p nh·∫•t: {stats['mw_statistics']['min']:.0f} MW")
    
    # T·∫°o visualizations
    print(f"\nüìà B∆Ø·ªöC 3: T·∫†O BI·ªÇU ƒê·ªí PH√ÇN T√çCH")
    print("-" * 50)
    
    plots = analyzer.create_comprehensive_visualizations(
        region=region,
        save_plots=True,
        plot_dir='plots'
    )
    
    # T·∫°o b√°o c√°o
    report = analyzer.generate_region_report(region, f'reports/{region}_analysis.txt')
    
    # B∆∞·ªõc 4: Chu·∫©n b·ªã cho Machine Learning
    print(f"\nü§ñ B∆Ø·ªöC 4: CHU·∫®N B·ªä CHO MACHINE LEARNING")
    print("-" * 50)
    
    # T√¨m file d·ªØ li·ªáu
    data_file = f'data/{region}_hourly.csv'
    if not os.path.exists(data_file):
        print(f"File {data_file} kh√¥ng t·ªìn t·∫°i. T√¨m ki·∫øm file kh√°c...")
        for file in os.listdir('data'):
            if region in file and file.endswith('.csv'):
                data_file = f'data/{file}'
                break
    
    print(f"S·ª≠ d·ª•ng file: {data_file}")
    
    # Kh·ªüi t·∫°o interface Lab 4
    lab = DAT301mLab4Interface(
        data_path=data_file,
        region=region,
        input_width=24,  # 24 gi·ªù input
        label_width=1,   # d·ª± ƒëo√°n 1 gi·ªù
        shift=1,         # shift 1 gi·ªù
        random_seed=42
    )
    
    # Ch·∫°y workflow ho√†n ch·ªânh
    print(f"\nüöÄ B∆Ø·ªöC 5: CH·∫†Y WORKFLOW HO√ÄN CH·ªàNH")
    print("-" * 50)
    
    try:
        # Ch·∫°y complete lab (c√≥ th·ªÉ m·∫•t th·ªùi gian)
        results = lab.run_complete_lab(
            output_dir=f'lab4_results_{region}/',
            save_plots=True,
            multi_step=False,  # T·∫Øt multi-step ƒë·ªÉ nhanh h∆°n
            create_ensemble=True
        )
        
        print(f"\n‚úÖ HO√ÄN TH√ÄNH!")
        print(f"K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i: lab4_results_{region}/")
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£ t√≥m t·∫Øt
        print(f"\nüìã T√ìM T·∫ÆT K·∫æT QU·∫¢:")
        print("-" * 30)
        
        for task_name, task_results in results.items():
            if task_name.startswith('task') and 'evaluation_metrics' in task_results:
                print(f"\n{task_name.upper()}:")
                for model_name, metrics in task_results['evaluation_metrics'].items():
                    rmse = metrics.get('RMSE', 'N/A')
                    mae = metrics.get('MAE', 'N/A')
                    print(f"  {model_name:15} - RMSE: {rmse:.2f}, MAE: {mae:.2f}")
        
        # Hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi
        print(f"\n‚ùì C√ÇU TR·∫¢ L·ªúI LAB:")
        print("-" * 20)
        
        for question, answer in results.get('answers', {}).items():
            print(f"\n{question}:")
            # Hi·ªÉn th·ªã 200 k√Ω t·ª± ƒë·∫ßu
            answer_preview = answer[:200] + "..." if len(answer) > 200 else answer
            print(answer_preview)
            
    except Exception as e:
        print(f"‚ùå L·ªói khi ch·∫°y lab: {e}")
        print("H√£y th·ª≠ ch·∫°y t·ª´ng task ri√™ng l·∫ª:")
        
        # Ch·∫°y ri√™ng Task 1 (√≠t l·ªói nh·∫•t)
        try:
            task1_results = lab.execute_task1(
                datetime_col='Datetime',
                target_col='MW',
                create_plots=True,
                save_plots=True,
                plot_dir='plots'
            )
            print(f"‚úÖ Task 1 ho√†n th√†nh: {task1_results}")
        except Exception as e1:
            print(f"‚ùå Task 1 l·ªói: {e1}")

def quick_analysis_example():
    """
    V√≠ d·ª• ph√¢n t√≠ch nhanh
    """
    print("\n" + "="*60)
    print("V√ç D·ª§ PH√ÇN T√çCH NHANH")
    print("="*60)
    
    analyzer = PJMDataAnalyzer('data')
    regions = analyzer.get_available_regions()[:3]  # L·∫•y 3 khu v·ª±c ƒë·∫ßu
    
    print(f"So s√°nh {len(regions)} khu v·ª±c: {regions}")
    
    # So s√°nh c√°c khu v·ª±c
    comparison = analyzer.compare_regions(
        regions=regions,
        save_plots=True,
        plot_dir='plots'
    )
    
    print("\nK·∫øt qu·∫£ so s√°nh:")
    print(comparison['statistics'])

def data_exploration_example():
    """
    V√≠ d·ª• kh√°m ph√° d·ªØ li·ªáu
    """
    print("\n" + "="*60)
    print("V√ç D·ª§ KH√ÅM PH√Å D·ªÆ LI·ªÜU")
    print("="*60)
    
    analyzer = PJMDataAnalyzer('data')
    
    # Kh√°m ph√° t·ª´ng khu v·ª±c
    for region in analyzer.get_available_regions()[:2]:  # Ch·ªâ 2 khu v·ª±c ƒë·∫ßu
        print(f"\n--- Kh√°m ph√° khu v·ª±c {region} ---")
        
        try:
            data = analyzer.load_region_data(region)
            stats = analyzer.get_data_statistics()
            
            print(f"Th·ªùi gian: {stats['date_range']['start']} ‚Üí {stats['date_range']['end']}")
            print(f"D·ªØ li·ªáu: {stats['total_records']:,} b·∫£n ghi ({stats['date_range']['duration_years']:.1f} nƒÉm)")
            print(f"Ti√™u th·ª•: {stats['mw_statistics']['mean']:.0f} MW trung b√¨nh")
            
            # T·∫°o b√°o c√°o
            report = analyzer.generate_region_report(region)
            print(f"B√°o c√°o: {len(report)} k√Ω t·ª±")
            
        except Exception as e:
            print(f"L·ªói x·ª≠ l√Ω {region}: {e}")

if __name__ == "__main__":
    # T·∫°o th∆∞ m·ª•c c·∫ßn thi·∫øt
    os.makedirs('plots', exist_ok=True)
    os.makedirs('reports', exist_ok=True)
    
    # Ch·∫°y v√≠ d·ª• ch√≠nh
    main()
    
    # Uncomment ƒë·ªÉ ch·∫°y c√°c v√≠ d·ª• kh√°c
    # quick_analysis_example()
    # data_exploration_example() 